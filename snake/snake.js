// Generated by CoffeeScript 1.10.0
(function() {
  var Point, Snake, callback, canvas, ctx, genColor, h, randElem, randInt, snake, tid, w, xsize, ysize;

  canvas = document.getElementById("canvas");

  ctx = canvas.getContext("2d");

  ctx.font = "32pt Courier";

  w = canvas.width = canvas.clientWidth;

  h = canvas.height = canvas.clientHeight;

  xsize = 30;

  ysize = 30;

  Point = (function() {
    function Point(x1, y1) {
      this.x = x1;
      this.y = y1;
    }

    Point.prototype.betX = function(other) {
      var ret;
      ret = this.x - other.x;
      if (ret === xsize - 1) {
        ret = -1;
      }
      if (ret === 1 - xsize) {
        ret = 1;
      }
      return ret;
    };

    Point.prototype.betY = function(other) {
      var ret;
      ret = this.y - other.y;
      if (ret === ysize - 1) {
        ret = -1;
      }
      if (ret === 1 - ysize) {
        ret = 1;
      }
      return ret;
    };

    return Point;

  })();

  randInt = function(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
  };

  randElem = function(l) {
    return l.splice(randInt(0, l.length), 1)[0];
  };

  genColor = function() {
    var b, colors, g, r;
    colors = [randInt(200, 255), randInt(100, 200), randInt(50, 100)];
    r = randElem(colors);
    g = randElem(colors);
    b = randElem(colors);
    return "rgb(" + r + "," + g + "," + b + ")";
  };

  Snake = (function() {
    function Snake() {
      var i, j;
      this.running = true;
      this.way = [new Point(11, 10), new Point(10, 10)];
      this.map = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = xsize * ysize; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push(false);
        }
        return results;
      })();
      for (i = j = 0; j < 20; i = ++j) {
        this.setAt(randInt(0, xsize), randInt(0, ysize), true);
      }
      this.colors = [];
      this.colors.push(genColor());
      this.colors.push(genColor());
      this.dir = "Right";
      this.apple = new Point(0, 0);
      this.randApple();
    }

    Snake.prototype.setAt = function(x, y, bl) {
      return this.map[y * xsize + x] = bl;
    };

    Snake.prototype.getAt = function(x, y) {
      return this.map[y * xsize + x];
    };

    Snake.prototype.go = function(dir) {
      var last, px, py;
      last = this.way[this.way.length - 1];
      px = last.x;
      py = last.y;
      last.x = this.way[0].x;
      last.y = this.way[0].y;
      if (dir === "Left") {
        last.x--;
      }
      if (dir === "Right") {
        last.x++;
      }
      if (dir === "Up") {
        last.y--;
      }
      if (dir === "Down") {
        last.y++;
      }
      if (last.y < 0) {
        last.y += ysize;
      }
      if (last.y >= ysize) {
        last.y -= ysize;
      }
      if (last.x < 0) {
        last.x += xsize;
      }
      if (last.x >= xsize) {
        last.x -= xsize;
      }
      this.way.pop();
      if (this.isHere(last.x, last.y)) {
        this.dead();
        this.running = false;
      }
      this.way.unshift(last);
      if (this.apple.x === last.x && this.apple.y === last.y) {
        this.randApple();
        this.way.push(new Point(px, py, genColor()));
        return this.colors.push(genColor());
      }
    };

    Snake.prototype.dead = function() {
      var _, index, j, len, ref, results;
      ref = this.colors;
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        _ = ref[index];
        results.push(this.colors[index] = "red");
      }
      return results;
    };

    Snake.prototype.tick = function() {
      var dir;
      if (!this.running) {
        return;
      }
      dir = this.getDir();
      if (dir === "Left" && this.dir === "Right") {
        this.dir = dir;
      }
      if (dir === "Right" && this.dir === "Left") {
        this.dir = dir;
      }
      if (dir === "Up" && this.dir === "Down") {
        this.dir = dir;
      }
      if (dir === "Down" && this.dir === "Up") {
        this.dir = dir;
      }
      return this.go(this.dir);
    };

    Snake.prototype.draw = function() {
      var current, index, j, k, len, m, point, ref, ref1, ref2, x, y;
      ctx.fillStyle = "#220033";
      ctx.fillRect(0, 0, xsize * 20, ysize * 20);
      current = this.way[0];
      ctx.fillStyle = this.colors[0];
      ctx.fillRect(current.x * 20, current.y * 20, 20, 20);
      ref = this.way.slice(1);
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        point = ref[index];
        ctx.fillStyle = this.colors[index + 1];
        if ((current.betX(point)) !== 0) {
          ctx.fillRect(point.x * 20, point.y * 20 + 3, 20, 14);
        } else {
          ctx.fillRect(point.x * 20 + 3, point.y * 20, 14, 20);
        }
        current = point;
      }
      ctx.fillStyle = "green";
      ctx.fillRect(this.apple.x * 20 + 2, this.apple.y * 20 + 2, 16, 16);
      ctx.fillStyle = "brown";
      for (x = k = 0, ref1 = xsize; 0 <= ref1 ? k < ref1 : k > ref1; x = 0 <= ref1 ? ++k : --k) {
        for (y = m = 0, ref2 = ysize; 0 <= ref2 ? m < ref2 : m > ref2; y = 0 <= ref2 ? ++m : --m) {
          if (this.getAt(x, y)) {
            ctx.fillRect(x * 20 + 2, y * 20 + 2, 16, 16);
          }
        }
      }
      if (!this.running) {
        ctx.fillStyle = "white";
        ctx.font = "32pt Courier";
        return ctx.fillText("GAME OVER", 100, 100);
      }
    };

    Snake.prototype.getDir = function() {
      var head, neck;
      head = this.way[0];
      neck = this.way[1];
      if ((head.betY(neck)) === 1) {
        return "Down";
      } else if ((head.betY(neck)) === -1) {
        return "Up";
      } else if ((head.betX(neck)) === 1) {
        return "Right";
      } else {
        return "Left";
      }
    };

    Snake.prototype.isHere = function(x, y) {
      var j, len, point, ref;
      ref = this.way;
      for (j = 0, len = ref.length; j < len; j++) {
        point = ref[j];
        if (point.x === x && point.y === y) {
          return true;
        }
      }
      if (this.getAt(x, y)) {
        return true;
      }
      return false;
    };

    Snake.prototype.randApple = function() {
      var results, x, y;
      results = [];
      while (true) {
        x = Math.floor(Math.random() * 29);
        y = Math.floor(Math.random() * 29);
        if (!this.isHere(x, y)) {
          this.apple.x = x;
          this.apple.y = y;
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Snake;

  })();

  snake = new Snake;

  tid = 0;

  callback = function() {
    snake.tick();
    snake.draw();
    return tid = setTimeout(callback, 180);
  };

  setTimeout(callback, 180);

  window.onkeydown = function(e) {
    if (e.code === "ArrowUp") {
      snake.dir = "Up";
    }
    if (e.code === "ArrowDown") {
      snake.dir = "Down";
    }
    if (e.code === "ArrowLeft") {
      snake.dir = "Left";
    }
    if (e.code === "ArrowRight") {
      snake.dir = "Right";
    }
    snake.tick();
    snake.draw();
    clearTimeout(tid);
    return tid = setTimeout(callback, 180);
  };

}).call(this);
