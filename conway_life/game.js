// Generated by CoffeeScript 1.10.0
(function() {
  var World, b2i, canvas, ctx, h, play, timer, w, world;

  canvas = document.getElementById("canvas");

  ctx = canvas.getContext("2d");

  w = canvas.clientWidth = canvas.width = document.documentElement.clientWidth;

  h = canvas.clientHeight = canvas.height = document.documentElement.clientHeight;

  b2i = function(b) {
    if (b) {
      return 1;
    } else {
      return 0;
    }
  };

  World = (function() {
    function World(xsize, ysize) {
      var i;
      this.xsize = xsize;
      this.ysize = ysize;
      this.map = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = this.xsize * this.ysize; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push(false);
        }
        return results;
      }).call(this);
      this.newmap = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = this.xsize * this.ysize; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push(false);
        }
        return results;
      }).call(this);
    }

    World.prototype.getAt = function(x, y) {
      x = x >= 0 ? x % this.xsize : this.xsize + x;
      y = y >= 0 ? y % this.ysize : this.ysize + y;
      return this.map[y * this.xsize + x];
    };

    World.prototype.setAt = function(x, y, type) {
      x = x >= 0 ? x % this.xsize : this.xsize + x;
      y = y >= 0 ? y % this.ysize : this.ysize + y;
      return this.map[y * this.xsize + x] = type;
    };

    World.prototype.setAtNew = function(x, y, type) {
      x = x >= 0 ? x % this.xsize : this.xsize + x;
      y = y >= 0 ? y % this.ysize : this.ysize + y;
      return this.newmap[y * this.xsize + x] = type;
    };

    World.prototype.swap = function() {
      var ref;
      return ref = [this.newmap, this.map], this.map = ref[0], this.newmap = ref[1], ref;
    };

    World.prototype.tickCell = function(x, y) {
      var neigh;
      neigh = 0;
      neigh += b2i(this.getAt(x + 1, y + 1));
      neigh += b2i(this.getAt(x, y + 1));
      neigh += b2i(this.getAt(x - 1, y + 1));
      neigh += b2i(this.getAt(x + 1, y));
      neigh += b2i(this.getAt(x - 1, y));
      neigh += b2i(this.getAt(x + 1, y - 1));
      neigh += b2i(this.getAt(x, y - 1));
      neigh += b2i(this.getAt(x - 1, y - 1));
      if (!this.getAt(x, y) && neigh === 3) {
        return this.setAtNew(x, y, true);
      } else if (this.getAt(x, y) && (neigh === 3 || neigh === 2)) {
        return this.setAtNew(x, y, true);
      } else {
        return this.setAtNew(x, y, false);
      }
    };

    World.prototype.tick = function() {
      var j, k, ref, ref1, x, y;
      for (x = j = 0, ref = this.xsize; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = k = 0, ref1 = this.ysize; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
          this.tickCell(x, y);
        }
      }
      this.swap();
      return this.draw();
    };

    World.prototype.drawCell = function(x, y) {
      ctx.fillStyle = this.getAt(x, y) ? "pink" : "black";
      return ctx.fillRect(x * 2, y * 2, 2, 2);
    };

    World.prototype.draw = function() {
      var j, k, ref, ref1, x, y;
      for (x = j = 0, ref = this.xsize; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        for (y = k = 0, ref1 = this.ysize; 0 <= ref1 ? k <= ref1 : k >= ref1; y = 0 <= ref1 ? ++k : --k) {
          this.drawCell(x, y);
        }
      }
    };

    return World;

  })();

  world = new World(128, 128);


  /*
  010
  111
  100
   */

  world.setAt(100, 101, true);

  world.setAt(101, 100, true);

  world.setAt(101, 101, true);

  world.setAt(101, 102, true);

  world.setAt(102, 100, true);

  play = true;

  timer = setInterval((function() {
    return world.tick();
  }), 50);

  window.onclick = function() {
    play = !play;
    if (play) {
      return timer = setInterval((function() {
        return world.tick();
      }), 50);
    } else {
      return clearTimeout(timer);
    }
  };

}).call(this);
