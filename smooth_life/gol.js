// Generated by CoffeeScript 1.10.0
(function() {
  var World, alpha, b1, b2, canvas, color, ctx, d1, d2, h, j, k, l, neigh, neighList, nx, ny, o, rad, s, self, selfList, sigma1, sigma2, sigmam, timer, w, world;

  canvas = document.getElementById("canvas");

  ctx = canvas.getContext("2d");

  w = canvas.clientWidth = canvas.width = document.documentElement.clientWidth;

  h = canvas.clientHeight = canvas.height = document.documentElement.clientHeight;

  alpha = .05;

  sigma1 = function(x, a) {
    return 1 / (1 + Math.exp(-(x - a) * 4 / alpha));
  };

  sigma2 = function(x, a, b) {
    return sigma1(x, a) * (1 - sigma1(x, b));
  };

  sigmam = function(x, y, m) {
    return x * (1 - sigma1(m, .5)) + y * sigma1(m, .5);
  };

  b1 = .278;

  b2 = .365;

  d1 = .267;

  d2 = .445;

  s = function(n, m) {
    return sigma2(n, sigmam(b1, d1, m), sigmam(b2, d2, m));
  };

  for (neigh = j = 0; j <= 255; neigh = ++j) {
    for (self = k = 0; k <= 255; self = ++k) {
      color = Math.floor((s(neigh / 255, self / 255)) * 255);
      ctx.fillStyle = "rgb(" + color + ", 0, 0)";
      ctx.fillRect(neigh, 256 + self, 1, 1);
    }
  }

  neighList = [];

  selfList = [];

  for (nx = l = -9; l <= 9; nx = ++l) {
    for (ny = o = -9; o <= 9; ny = ++o) {
      rad = nx * nx + ny * ny;
      if ((9 < rad && rad < 81)) {
        neighList.push(nx, ny);
      }
      if (rad <= 9) {
        selfList.push(nx, ny);
      }
    }
  }

  World = (function() {
    function World(xsize, ysize) {
      var i;
      this.xsize = xsize;
      this.ysize = ysize;
      this.map = (function() {
        var p, ref, results;
        results = [];
        for (i = p = 0, ref = this.xsize * this.ysize; 0 <= ref ? p < ref : p > ref; i = 0 <= ref ? ++p : --p) {
          results.push(0);
        }
        return results;
      }).call(this);
      this.newmap = (function() {
        var p, ref, results;
        results = [];
        for (i = p = 0, ref = this.xsize * this.ysize; 0 <= ref ? p < ref : p > ref; i = 0 <= ref ? ++p : --p) {
          results.push(0);
        }
        return results;
      }).call(this);
      this.init();
      this.draw();
    }

    World.prototype.getAt = function(x, y) {
      x = x >= 0 ? x % this.xsize : this.xsize + x % this.xsize;
      y = y >= 0 ? y % this.ysize : this.ysize + y % this.ysize;
      return this.map[y * this.xsize + x];
    };

    World.prototype.setAtNew = function(x, y, type) {
      x = x >= 0 ? x % this.xsize : this.xsize + x % this.xsize;
      y = y >= 0 ? y % this.ysize : this.ysize + y % this.ysize;
      return this.newmap[y * this.xsize + x] = type;
    };

    World.prototype.swap = function() {
      var ref;
      return ref = [this.newmap, this.map], this.map = ref[0], this.newmap = ref[1], ref;
    };

    World.prototype.update = function() {
      var p, q, ref, ref1, x, y;
      for (x = p = 0, ref = this.xsize; 0 <= ref ? p < ref : p > ref; x = 0 <= ref ? ++p : --p) {
        for (y = q = 0, ref1 = this.ysize; 0 <= ref1 ? q < ref1 : q > ref1; y = 0 <= ref1 ? ++q : --q) {
          this.updateCell(x, y);
        }
      }
      return this.swap();
    };

    World.prototype.updateCell = function(x, y) {
      var _, i, len, len1, p, q;
      neigh = 0;
      self = 0;
      for (i = p = 0, len = neighList.length; p < len; i = p += 2) {
        _ = neighList[i];
        neigh += this.getAt(x + neighList[i], y + neighList[i + 1]);
      }
      for (i = q = 0, len1 = selfList.length; q < len1; i = q += 2) {
        _ = selfList[i];
        self += this.getAt(x + selfList[i], y + selfList[i + 1]);
      }
      return this.setAtNew(x, y, s(neigh / 220, self / 29));
    };

    World.prototype.draw = function() {
      var index, p, ref, results, x, y;
      index = 0;
      results = [];
      for (y = p = 0, ref = this.ysize; 0 <= ref ? p < ref : p > ref; y = 0 <= ref ? ++p : --p) {
        results.push((function() {
          var q, ref1, results1;
          results1 = [];
          for (x = q = 0, ref1 = this.xsize; 0 <= ref1 ? q < ref1 : q > ref1; x = 0 <= ref1 ? ++q : --q) {
            color = Math.floor(this.map[index++] * 255);
            ctx.fillStyle = "rgb(0," + color + ",0)";
            results1.push(ctx.fillRect(x, y, 1, 1));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    World.prototype.tick = function() {
      this.update();
      this.draw();
    };

    World.prototype.drawRect = function(x, y, w, h) {
      var p, q, ref, ref1, ref2, ref3, rx, ry;
      this.swap();
      for (rx = p = ref = x, ref1 = x + w; ref <= ref1 ? p <= ref1 : p >= ref1; rx = ref <= ref1 ? ++p : --p) {
        for (ry = q = ref2 = y, ref3 = y + h; ref2 <= ref3 ? q <= ref3 : q >= ref3; ry = ref2 <= ref3 ? ++q : --q) {
          this.setAtNew(rx, ry, .5);
        }
      }
      return this.swap();
    };

    World.prototype.init = function() {
      var hei, i, p, wid, x, y;
      for (i = p = 0; p <= 16; i = ++p) {
        x = Math.floor(Math.random() * this.xsize);
        y = Math.floor(Math.random() * this.ysize);
        wid = 0;
        hei = 0;
        if (Math.random() < .5) {
          wid = this.xsize;
          hei = 4;
        } else {
          hei = this.ysize;
          wid = 4;
        }
        this.drawRect(x, y, wid, hei);
      }
    };

    return World;

  })();

  world = new World(256, 256);

  timer = null;

  window.onclick = function(event) {
    if (timer === null) {
      return timer = setInterval(function() {
        world.tick();
      }, 50);
    } else {
      clearTimeout(timer);
      return timer = null;
    }
  };

}).call(this);
